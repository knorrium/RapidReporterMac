/*

Copyright 2015 Skyscanner Ltd

Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
file except in compliance with the License. You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
ANY KIND, either express or implied. See the License for the specificlanguage governing
permissions and limitations under the License.

*/

import Cocoa

class ViewController: NSViewController {

    // Attribute Declarations & Outlets
    var screenShotPath : String?
    var rtfNotePath: String?
    var progressBarModel: ProgressBarModel?
    var formatter: DateFormatterModel? = DateFormatterModel()
    var fileIOModel: FileIOModel?
    var notesModel: NotesModel?
    var screenshotModel: ScreenshotModel?
    var timerModel: TimerModel?
    var sessionModel: SessionModel? = SessionModel()
    var contextMenuModel: ContextualMenuModel?
    var customMenu: NSMenu?
    
    let appDelegate = NSApplication.sharedApplication().delegate as! AppDelegate
    
    @IBOutlet weak var categoryLabel: NSTextField!
    @IBOutlet weak var noteTextField: NSTextField!
    @IBOutlet weak var sessionProgressBar: NSProgressIndicator!
    @IBOutlet weak var cameraButton: NSButton!
    @IBOutlet weak var noteButton: NSButton!
    @IBOutlet weak var categoryLabelAbove: NSTextField!
    @IBOutlet weak var categoryLabelBelow: NSTextField!
    @IBOutlet weak var textFieldCell: NSTextFieldCell!
    @IBOutlet weak var invisibleButton: NSButton!
    @IBOutlet weak var transparencySlider: NSSlider!
    
    // Functions called as a result of an action on the UI.
    
    @IBAction func transparencySliderSelector(sender: AnyObject) {
        // Changes transparency of window.
        var appDelegate = NSApplication.sharedApplication().delegate as! AppDelegate
        appDelegate.setWindowTransparency(transparencySlider.integerValue)
    }
    
    @IBAction func noteButtonSelector(sender: AnyObject) {
        // Creates an RTF note and writes a message to the log.
        rtfNotePath = notesModel!.openNote(rtfNotePath == nil)
        if (rtfNotePath != nil){
            fileIOModel!.logToFile("autogenerated", textToWrite: "extended note saved", screenshotPath: nil, rtfNotePath: rtfNotePath)
        }
    }
    
    @IBAction func cameraButtonSelector(sender: AnyObject) {
        var flags = NSApp!.currentEvent!!.modifierFlags
        var fileName = fileIOModel?.makeScreenshotFileName(screenshotModel!.getNumberOfScreenshotsTaken())
        var path = fileIOModel!.getAbsolutePathOfSessionFolder() + fileName!
        
        if (flags & NSEventModifierFlags.ShiftKeyMask).rawValue != 0 {
            if screenshotModel!.takeScreenshotOfSelection(path) {
                screenShotPath = fileName
            }
        } else {
            if screenshotModel!.takeScreenshotOfActiveScreen(path, window: appDelegate.window) {
                screenShotPath = fileName
            }
        }
        
        if (screenShotPath != nil) {
            fileIOModel?.logToFile("autogenerated", textToWrite: "screenshot saved", screenshotPath: screenShotPath, rtfNotePath: nil)
            screenshotModel?.incrementScreensTakenThisSession()
        }
    }
    
    @IBAction func openFolderSelector(sender: AnyObject) {
        openFolderInFinder()
    }
    
    // Empty selector for the session length menu item.
    @IBAction func sessionLengthSelector(sender: AnyObject) {
        
    }
    
    @IBAction func timeSelector(sender: AnyObject) {
        // Used to select session time from contextual menu.
        var itemClicked: NSMenuItem = sender as! NSMenuItem
        switch itemClicked.tag {
        case 30:
            progressBarModel!.setBarMax(Int(30.0))
            break
        case 60:
            progressBarModel!.setBarMax(Int(60.0))
            break
        case 90:
            progressBarModel!.setBarMax(Int(90.0))
            break
        case 120:
            progressBarModel!.setBarMax(Int(120.0))
            break
        default:
            break
        }
    }
    
    @IBAction func noteSelector(sender: AnyObject) {
        noteTextField.stringValue = (sender as! NSMenuItem).title
    }
    
    @IBAction func takeScreenshot (sender: AnyObject) {
        var fileName = fileIOModel?.makeScreenshotFileName(screenshotModel!.getNumberOfScreenshotsTaken())
        var path = fileIOModel!.getAbsolutePathOfSessionFolder() + fileName!
        if screenshotModel!.takeScreenshotOfSelection(path) {
            screenShotPath = fileName
            fileIOModel?.logToFile("autogenerated", textToWrite: "screenshot saved", screenshotPath: screenShotPath, rtfNotePath: nil)
            screenshotModel?.incrementScreensTakenThisSession()
        }
    }
    
    @IBAction func takeActiveScreenshot (sender: AnyObject) {
        var fileName = fileIOModel!.makeScreenshotFileName(screenshotModel!.getNumberOfScreenshotsTaken())
        var path = fileIOModel!.getAbsolutePathOfSessionFolder() + fileName
        if screenshotModel!.takeScreenshotOfActiveScreen(path, window: appDelegate.window) {
            screenShotPath = fileName
            fileIOModel?.logToFile("autogenerated", textToWrite: "screenshot saved", screenshotPath: screenShotPath, rtfNotePath: nil)
            screenshotModel?.incrementScreensTakenThisSession()
        }
    }
    
    @IBAction func openWorkingFolder (sender: AnyObject) {
        openFolderInFinder()
    }
    
    @IBAction func openNotes (sender: AnyObject) {
        noteButtonSelector(sender)
    }
    
    @IBAction func increaseTransparency (sender: AnyObject) {
        let integerValue = transparencySlider!.integerValue
        if (integerValue > 95) {
            transparencySlider!.integerValue = 100
            appDelegate.setWindowTransparency(100)
        } else {
            transparencySlider!.integerValue = integerValue + 5
            appDelegate.setWindowTransparency(integerValue + 5)
        }
    }
    
    @IBAction func decreaseTransparency (sender: AnyObject) {
        let integerValue = transparencySlider!.integerValue
        if (integerValue < 35) {
            transparencySlider!.integerValue = 30
            appDelegate.setWindowTransparency(30)
        } else {
            transparencySlider!.integerValue = integerValue - 5
            appDelegate.setWindowTransparency(integerValue - 5)
        }
    }
    
    @IBAction func increaseSessionLength (sender: AnyObject) {
        let maxValue: Int = Int(progressBarModel!.getBarMax())
        if (maxValue != 120) {
            progressBarModel!.setBarMax(maxValue + 30)
        }
    }
    
    @IBAction func decreaseSessionLength (sender: AnyObject) {
        let maxValue: Int = Int(progressBarModel!.getBarMax())
        if (maxValue != 30) {
            progressBarModel!.setBarMax(maxValue - 30)
        }
    }
    
    // Overriden Functions
    
    override func viewDidLoad() {
        super.viewDidLoad()
        progressBarModel = ProgressBarModel(bar: sessionProgressBar)
        contextMenuModel = ContextualMenuModel()
    }
    
    override func validateMenuItem(menuItem: NSMenuItem) -> Bool {
        if (menuItem.description.lowercaseString.rangeOfString("screenshot") != nil
            || menuItem.description.lowercaseString.rangeOfString("folder") != nil
            || menuItem.description.lowercaseString.rangeOfString("notes") != nil
            || menuItem.description.lowercaseString.rangeOfString("session") != nil) {
                if (categoryLabel.stringValue == "Reporter"
                    || categoryLabel.stringValue == "Charter") {
                        return false
                } else {
                    return true
                }
        } else if (menuItem.description.lowercaseString.rangeOfString("transparency") != nil
                    || menuItem.description.lowercaseString.rangeOfString("mins from now") != nil) {
            return true
        } else {
            for note in notesModel!.getPreviousMessageNotes() {
                if (note == menuItem.title) {
                    return true
                }
            }
            return super.validateMenuItem(menuItem)
        }
    }
    
    override func rightMouseDown(theEvent: NSEvent) {
        let menu = contextMenuModel!.createContextMenu()
        contextMenuModel!.showContextMenu(menu, theEvent: theEvent, view: self.view)
    }
    
    // Helper Functions
    
    /**
        This method is called after the user enters a reporter name and charter.
        It sets up the UI for use during the rest of the program,
        starts a timer, and creates and initialises a log.
    */
    func setup(){
        let formattedDate = formatter?.getFileNameTimeStamp()
        sessionModel!.startSession()
        enableUIElements()
        progressBarModel!.startProgressBar()
        fileIOModel = FileIOModel(reporterName: sessionModel!.getReporterName()!)

        fileIOModel?.createFolder(formattedDate!)
        fileIOModel?.initialiseLog(sessionModel!.getCharter()!)
        
        screenshotModel = ScreenshotModel()
        
        notesModel = NotesModel(fileIO: fileIOModel!)
        timerModel = TimerModel()
        updateCategoryLabel(0)
        noteTextField.placeholderString = "Enter a note"
    }
    
    /// Opens the current session's folder in a Finder window.
    func openFolderInFinder(){
        NSWorkspace.sharedWorkspace().openFile(fileIOModel!.getAbsolutePathOfSessionFolder(), withApplication: NSString(string:"Finder") as String)
    }
    
    /** 
        Updates the category labels on the screen. After categories have been updated then the timer is as well.
    
        :param: index An integer representing the index of the element in the categories array that the main label should be set to.
    */
    func updateCategoryLabel(index: Int){
        var categories = sessionModel!.getCategories()
        sessionModel!.setCurrentCategory(categories[index])
        sessionModel!.setCategoryIndex(index)
        categoryLabel.stringValue = sessionModel!.getCurrentCategory()!
        categoryLabelAbove.stringValue = "\u{2191} " + categories[index == 0 ? categories.count - 1 : index - 1]
        categoryLabelBelow.stringValue = "\u{2193} " + categories[index == categories.count - 1 ? 0 : index + 1]
        timerModel!.controlTimer(sessionModel!.getCurrentCategory()!)
    }
    
    /** 
        Sets the text of the supplied text box to an empty string.
    
        :param: textField The text field to clear.
    */
    func clearTextBox(textField: NSTextField){
        textField.stringValue = ""
    }
    
    /**
        Writes the time spent in Setup/Bug/Test categories to the log
        for analysis after the testing session. Also prints percentages
        of total time spent for easier analysis.
    */
    func writeTimesToLog(){
        if ((timerModel!.getTimes(.Setup)! != 0) || (timerModel!.getTimes(.Bug)! != 0) || (timerModel!.getTimes(.Test)! != 0)) {
            fileIOModel?.logToFile("Setup Time", textToWrite: formatter!.formatTimeInterval(timerModel!.getTimes(.Setup)!), screenshotPath: nil, rtfNotePath: nil)
            fileIOModel?.logToFile("Bug Time", textToWrite: formatter!.formatTimeInterval(timerModel!.getTimes(.Bug)!), screenshotPath: nil, rtfNotePath: nil)
            fileIOModel?.logToFile("Test Time", textToWrite: formatter!.formatTimeInterval(timerModel!.getTimes(.Test)!), screenshotPath: nil, rtfNotePath: nil)
            fileIOModel?.logToFile("Setup Percent", textToWrite: timerModel!.calculateRatios(.Setup), screenshotPath: nil, rtfNotePath: nil)
            fileIOModel?.logToFile("Bug Percent", textToWrite: timerModel!.calculateRatios(.Bug), screenshotPath: nil, rtfNotePath: nil)
            fileIOModel?.logToFile("Test Percent", textToWrite: timerModel!.calculateRatios(.Test), screenshotPath: nil, rtfNotePath: nil)
        }
    }
    
    /// Enables UI elements that are disabled until the user enters a reporter and charter.
    func enableUIElements(){
        noteButton.enabled = true
        cameraButton.enabled = true
    }
    
    /// Finalises the log and closes the application.
    func finalise(){
        var currentCategory = sessionModel!.getCurrentCategory()
        if (currentCategory != "Reporter" && currentCategory != "Charter" && currentCategory != nil) {
            timerModel!.stopTimer()
            fileIOModel!.closeLog(sessionModel!.endSession())
            if (!sessionModel!.getIsCustomCategories()) {
                writeTimesToLog()
            }
        }
    }
}

// Used to add some custom functionality to the text box and stepper.
extension ViewController: NSTextFieldDelegate {
    
    /// This method is called when the user presses enter in text box.
    @IBAction func editText(sender: AnyObject) {
        switch categoryLabel.stringValue {
        case "Reporter":
            sessionModel?.setReporterName(noteTextField.stringValue)
            categoryLabel.stringValue = "Charter"
            noteTextField.placeholderString = "Enter your session charter"
            clearTextBox(noteTextField)
            break
        case "Charter":
            sessionModel?.setCharter(noteTextField.stringValue)
            clearTextBox(noteTextField)
            setup()
            break
        default:
            let userInput = noteTextField.stringValue
            clearTextBox(noteTextField)
            sessionModel?.setCurrentCategory(categoryLabel.stringValue)
            fileIOModel!.logToFile(sessionModel!.getCurrentCategory()!, textToWrite: userInput, screenshotPath: self.screenShotPath, rtfNotePath: self.rtfNotePath)
            if (screenShotPath != nil){
                screenShotPath = nil
            }
            if (rtfNotePath != nil){
                rtfNotePath = nil
            }
            notesModel?.saveMessageNote(userInput)
            contextMenuModel!.setFieldEditorMenu(noteTextField, notes: notesModel!.getPreviousMessageNotes())
            break
        }
    }
    
    func control(control: NSControl, textView: NSTextView, doCommandBySelector commandSelector: Selector) -> Bool {
        var categories = sessionModel!.getCategories()
        var categoryIndex = sessionModel!.getCategoryIndex()
        if (categoryLabel.stringValue != "Reporter" && categoryLabel.stringValue != "Charter")
        {
            if NSStringFromSelector(commandSelector) == "moveDown:" {
                if (categoryIndex == categories.endIndex - 1){
                    categoryIndex = 0
                } else {
                    ++categoryIndex
                }
                updateCategoryLabel(categoryIndex)
                return true
            } else if NSStringFromSelector(commandSelector) == "moveUp:" {
                if (categoryIndex == 0){
                    categoryIndex = categories.endIndex - 1
                } else {
                    --categoryIndex
                }
                updateCategoryLabel(categoryIndex)
                return true
            }
        }
        return false
    }
    
}
